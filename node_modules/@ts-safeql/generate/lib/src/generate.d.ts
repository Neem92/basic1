import { DuplicateColumnsError, IdentiferCase, ParsedQuery, PostgresError } from "@ts-safeql/shared";
import { either } from "fp-ts";
import postgres from "postgres";
declare type JSToPostgresTypeMap = Record<string, unknown>;
declare type Sql = postgres.Sql<JSToPostgresTypeMap>;
export declare type GenerateResult = {
    result: string | null;
    stmt: postgres.Statement;
    query: string;
};
export declare type GenerateError = DuplicateColumnsError | PostgresError;
declare type CacheKey = string;
export interface GenerateParams {
    sql: Sql;
    query: string;
    pgParsed: ParsedQuery.Root;
    cacheMetadata?: boolean;
    cacheKey: CacheKey;
    fieldTransform: IdentiferCase | undefined;
    overrides?: Partial<{
        types: Record<string, string>;
    }>;
}
export declare function createGenerator(): {
    generate: (params: GenerateParams) => Promise<either.Either<GenerateError, GenerateResult>>;
    dropCacheKey: (cacheKey: CacheKey) => boolean;
    clearCache: () => void;
};
export {};
