"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRelationsWithJoinsTE = void 0;
const shared_1 = require("@ts-safeql/shared");
const assert_1 = __importDefault(require("assert"));
const fp_ts_1 = require("fp-ts");
const function_1 = require("fp-ts/function");
const libpg_query_1 = __importDefault(require("libpg-query"));
const mocha_1 = require("mocha");
const get_relations_with_joins_1 = require("./get-relations-with-joins");
const cases = [
    {
        query: `
      SELECT *
      FROM caregiver
    `,
        expected: [],
    },
    {
        query: `
    SELECT *
    FROM
      caregiver
        LEFT JOIN agency ON caregiver.id = agency.id
    `,
        expected: [["caregiver", [{ name: "agency", type: "JOIN_LEFT" }]]],
    },
    {
        query: `
      SELECT
        caregiver.id as caregiver_id,
        caregiver_agency.id as assoc_id
      FROM caregiver
        LEFT JOIN caregiver_agency ON caregiver.id = caregiver_agency.caregiver_id
        LEFT JOIN agency ON caregiver_agency.agency_id = agency.id
    `,
        expected: [
            [
                "caregiver",
                [
                    { name: "caregiver_agency", type: "JOIN_LEFT" },
                    { name: "agency", type: "JOIN_LEFT" },
                ],
            ],
        ],
    },
    {
        query: `
      SELECT
        a.x
      FROM
        a
          FULL JOIN w ON w.id = a.w_id
          INNER JOIN x ON x.id = a.x_id
          LEFT JOIN y ON y.id = a.y_id
          RIGHT JOIN z ON z.id = a.z_id,
        b
          FULL JOIN w ON w.id = b.w_id
          INNER JOIN x ON x.id = b.x_id
          LEFT JOIN y ON y.id = b.y_id
          RIGHT JOIN z ON z.id = b.z_id,
        c
    `,
        expected: [
            [
                "a",
                [
                    { name: "w", type: "JOIN_FULL" },
                    { name: "x", type: "JOIN_INNER" },
                    { name: "y", type: "JOIN_LEFT" },
                    { name: "z", type: "JOIN_RIGHT" },
                ],
            ],
            [
                "b",
                [
                    { name: "w", type: "JOIN_FULL" },
                    { name: "x", type: "JOIN_INNER" },
                    { name: "y", type: "JOIN_LEFT" },
                    { name: "z", type: "JOIN_RIGHT" },
                ],
            ],
        ],
    },
];
exports.getRelationsWithJoinsTE = (0, function_1.flow)(libpg_query_1.default.parseQuery, fp_ts_1.taskEither.tryCatchK(function_1.identity, shared_1.InternalError.to), fp_ts_1.taskEither.map(get_relations_with_joins_1.getRelationsWithJoins));
for (const { query, expected } of cases) {
    (0, mocha_1.test)(`get relations with joins: ${query}`, async () => {
        return (0, function_1.pipe)((0, exports.getRelationsWithJoinsTE)(query), fp_ts_1.taskEither.match((error) => assert_1.default.fail(error.message), (result) => assert_1.default.deepEqual([...result.entries()], expected)))();
    });
}
//# sourceMappingURL=get-relations-with-joins.test.js.map